# Docker Compose for Quantum Portfolio Optimizer
# Production-ready multi-service deployment

version: '3.8'

services:
  # Main application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: portfolio-optimizer-app
    ports:
      - "8000:8000"
      - "9090:9090"  # Prometheus metrics
    environment:
      - ENVIRONMENT=production
      - PORTFOLIO_DB_HOST=postgres
      - PORTFOLIO_DB_NAME=portfolio_optimizer
      - PORTFOLIO_DB_USER=portfolio_user
      - PORTFOLIO_DB_PASSWORD=secure_password_123
      - PORTFOLIO_REDIS_HOST=redis
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - FMP_API_KEY=${FMP_API_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
      - ./reports:/app/reports
    depends_on:
      - postgres
      - redis
    networks:
      - portfolio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: portfolio-optimizer-db
    environment:
      - POSTGRES_DB=portfolio_optimizer
      - POSTGRES_USER=portfolio_user
      - POSTGRES_PASSWORD=secure_password_123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - portfolio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio_user -d portfolio_optimizer"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: portfolio-optimizer-redis
    command: redis-server --appendonly yes --requirepass redis_password_123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - portfolio-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password_123", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Jupyter Lab for Analytics
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: portfolio-optimizer-jupyter
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=jupyter_token_123
    ports:
      - "8888:8888"
    environment:
      - ENVIRONMENT=development
      - PORTFOLIO_DB_HOST=postgres
      - PORTFOLIO_REDIS_HOST=redis
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./reports:/app/reports
    depends_on:
      - postgres
      - redis
    networks:
      - portfolio-network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: portfolio-optimizer-worker
    command: celery -A src.tasks.celery_app worker --loglevel=info --concurrency=4
    environment:
      - ENVIRONMENT=production
      - PORTFOLIO_DB_HOST=postgres
      - PORTFOLIO_REDIS_HOST=redis
      - CELERY_BROKER_URL=redis://redis_password_123@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis_password_123@redis:6379/2
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - portfolio-network
    restart: unless-stopped

  # Celery Beat Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: portfolio-optimizer-scheduler
    command: celery -A src.tasks.celery_app beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    environment:
      - ENVIRONMENT=production
      - PORTFOLIO_REDIS_HOST=redis
      - CELERY_BROKER_URL=redis://redis_password_123@redis:6379/1
    volumes:
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - portfolio-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: portfolio-optimizer-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - portfolio-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: portfolio-optimizer-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafana_password_123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - portfolio-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: portfolio-optimizer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
      - jupyter
      - grafana
    networks:
      - portfolio-network
    restart: unless-stopped

networks:
  portfolio-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
